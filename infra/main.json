{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.37.4.10188",
      "templateHash": "17030427135216553292"
    }
  },
  "parameters": {
    "namePrefix": {
      "type": "string",
      "defaultValue": "rossslaney",
      "metadata": {
        "description": "The name prefix for all resources"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The location for all resources"
      }
    },
    "domainName": {
      "type": "string",
      "metadata": {
        "description": "The domain name for DNS zone integration"
      }
    },
    "containerImage": {
      "type": "string",
      "defaultValue": "nginx:latest",
      "metadata": {
        "description": "The container image to deploy"
      }
    },
    "environment": {
      "type": "string",
      "defaultValue": "prod",
      "metadata": {
        "description": "Environment name (dev, staging, prod)"
      }
    }
  },
  "variables": {
    "resourceSuffix": "[format('{0}-{1}', parameters('namePrefix'), parameters('environment'))]",
    "acrName": "[replace(format('{0}acr', variables('resourceSuffix')), '-', '')]",
    "containerAppName": "[format('{0}-app', variables('resourceSuffix'))]",
    "containerAppEnvName": "[format('{0}-env', variables('resourceSuffix'))]",
    "storageAccountName": "[replace(format('{0}storage', variables('resourceSuffix')), '-', '')]",
    "logAnalyticsName": "[format('{0}-logs', variables('resourceSuffix'))]"
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2023-09-01",
      "name": "[variables('logAnalyticsName')]",
      "location": "[parameters('location')]",
      "properties": {
        "sku": {
          "name": "PerGB2018"
        },
        "retentionInDays": 30
      }
    },
    {
      "type": "Microsoft.ContainerRegistry/registries",
      "apiVersion": "2023-07-01",
      "name": "[variables('acrName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Basic"
      },
      "properties": {
        "adminUserEnabled": true
      }
    },
    {
      "type": "Microsoft.App/managedEnvironments",
      "apiVersion": "2024-03-01",
      "name": "[variables('containerAppEnvName')]",
      "location": "[parameters('location')]",
      "properties": {
        "appLogsConfiguration": {
          "destination": "log-analytics",
          "logAnalyticsConfiguration": {
            "customerId": "[reference(resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsName')), '2023-09-01').customerId]",
            "sharedKey": "[listKeys(resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsName')), '2023-09-01').primarySharedKey]"
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsName'))]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2023-05-01",
      "name": "[variables('storageAccountName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "properties": {
        "accessTier": "Hot",
        "allowBlobPublicAccess": true,
        "supportsHttpsTrafficOnly": true
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2023-05-01",
      "name": "[format('{0}/default/assets', variables('storageAccountName'))]",
      "properties": {
        "publicAccess": "Blob"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.App/containerApps",
      "apiVersion": "2024-03-01",
      "name": "[variables('containerAppName')]",
      "location": "[parameters('location')]",
      "properties": {
        "managedEnvironmentId": "[resourceId('Microsoft.App/managedEnvironments', variables('containerAppEnvName'))]",
        "configuration": {
          "ingress": {
            "external": true,
            "targetPort": 3000,
            "allowInsecure": false,
            "traffic": [
              {
                "weight": 100,
                "latestRevision": true
              }
            ]
          },
          "registries": [
            {
              "server": "[reference(resourceId('Microsoft.ContainerRegistry/registries', variables('acrName')), '2023-07-01').loginServer]",
              "username": "[listCredentials(resourceId('Microsoft.ContainerRegistry/registries', variables('acrName')), '2023-07-01').username]",
              "passwordSecretRef": "acr-password"
            }
          ],
          "secrets": [
            {
              "name": "acr-password",
              "value": "[listCredentials(resourceId('Microsoft.ContainerRegistry/registries', variables('acrName')), '2023-07-01').passwords[0].value]"
            }
          ]
        },
        "template": {
          "containers": [
            {
              "name": "main",
              "image": "[parameters('containerImage')]",
              "resources": {
                "cpu": "[json('0.25')]",
                "memory": "0.5Gi"
              },
              "env": [
                {
                  "name": "NODE_ENV",
                  "value": "production"
                },
                {
                  "name": "PORT",
                  "value": "3000"
                }
              ]
            }
          ],
          "scale": {
            "minReplicas": 1,
            "maxReplicas": 3,
            "rules": [
              {
                "name": "http-scaling",
                "http": {
                  "metadata": {
                    "concurrentRequests": "10"
                  }
                }
              }
            ]
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.ContainerRegistry/registries', variables('acrName'))]",
        "[resourceId('Microsoft.App/managedEnvironments', variables('containerAppEnvName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/dnsZones/CNAME",
      "apiVersion": "2023-07-01-preview",
      "name": "[format('{0}/{1}', parameters('domainName'), '@')]",
      "properties": {
        "TTL": 300,
        "CNAMERecord": {
          "cname": "[reference(resourceId('Microsoft.App/containerApps', variables('containerAppName')), '2024-03-01').configuration.ingress.fqdn]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.App/containerApps', variables('containerAppName'))]"
      ]
    },
    {
      "type": "Microsoft.App/containerApps",
      "apiVersion": "2024-03-01",
      "name": "[variables('containerAppName')]",
      "location": "[parameters('location')]",
      "properties": {
        "managedEnvironmentId": "[resourceId('Microsoft.App/managedEnvironments', variables('containerAppEnvName'))]",
        "configuration": {
          "ingress": {
            "external": true,
            "targetPort": 3000,
            "allowInsecure": false,
            "traffic": [
              {
                "weight": 100,
                "latestRevision": true
              }
            ],
            "customDomains": [
              {
                "name": "[parameters('domainName')]",
                "bindingType": "SniEnabled"
              }
            ]
          },
          "registries": [
            {
              "server": "[reference(resourceId('Microsoft.ContainerRegistry/registries', variables('acrName')), '2023-07-01').loginServer]",
              "username": "[listCredentials(resourceId('Microsoft.ContainerRegistry/registries', variables('acrName')), '2023-07-01').username]",
              "passwordSecretRef": "acr-password"
            }
          ],
          "secrets": [
            {
              "name": "acr-password",
              "value": "[listCredentials(resourceId('Microsoft.ContainerRegistry/registries', variables('acrName')), '2023-07-01').passwords[0].value]"
            }
          ]
        },
        "template": {
          "containers": [
            {
              "name": "main",
              "image": "[parameters('containerImage')]",
              "resources": {
                "cpu": "[json('0.25')]",
                "memory": "0.5Gi"
              },
              "env": [
                {
                  "name": "NODE_ENV",
                  "value": "production"
                },
                {
                  "name": "PORT",
                  "value": "3000"
                }
              ]
            }
          ],
          "scale": {
            "minReplicas": 1,
            "maxReplicas": 3,
            "rules": [
              {
                "name": "http-scaling",
                "http": {
                  "metadata": {
                    "concurrentRequests": "10"
                  }
                }
              }
            ]
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.ContainerRegistry/registries', variables('acrName'))]",
        "[resourceId('Microsoft.Network/dnsZones/CNAME', parameters('domainName'), '@')]",
        "[resourceId('Microsoft.App/managedEnvironments', variables('containerAppEnvName'))]"
      ]
    }
  ],
  "outputs": {
    "acrLoginServer": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.ContainerRegistry/registries', variables('acrName')), '2023-07-01').loginServer]"
    },
    "acrName": {
      "type": "string",
      "value": "[variables('acrName')]"
    },
    "containerAppFqdn": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.App/containerApps', variables('containerAppName')), '2024-03-01').configuration.ingress.fqdn]"
    },
    "storageAccountName": {
      "type": "string",
      "value": "[variables('storageAccountName')]"
    },
    "containerAppName": {
      "type": "string",
      "value": "[variables('containerAppName')]"
    },
    "resourceGroupName": {
      "type": "string",
      "value": "[resourceGroup().name]"
    },
    "customDomainUrl": {
      "type": "string",
      "value": "[format('https://{0}', parameters('domainName'))]"
    }
  }
}