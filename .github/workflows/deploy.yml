name: Deploy to Azure Container Apps

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  AZURE_RESOURCE_GROUP: FOUNDATION
  AZURE_LOCATION: centralus
  PROJECT_PREFIX: ross

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create Resource Group
        run: |
          az group create \
            --name ${{ env.AZURE_RESOURCE_GROUP }} \
            --location ${{ env.AZURE_LOCATION }}

      - name: Layer 1 ‚Äî Deploy Foundation (ACR, Container Apps Env, Storage)
        run: |
          az deployment group create \
            --debug \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name foundation \
            --template-file infra/layers/foundation.bicep \
            --parameters infra/layers/parameters-foundation.json \
            --parameters location=${{ env.AZURE_LOCATION }} \
            --parameters projectPrefix=${{ env.PROJECT_PREFIX }}

          # Extract foundation outputs
          export ACR_NAME="$(az deployment group show --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name foundation --query properties.outputs.acrName.value --output tsv)"
          export ACR_LOGIN_SERVER="$(az deployment group show --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name foundation --query properties.outputs.acrLoginServer.value --output tsv)"
          export CONTAINER_APPS_ENV_ID="$(az deployment group show --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name foundation --query properties.outputs.containerAppsEnvId.value --output tsv)"
          export UAMI_ID="$(az deployment group show --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name foundation --query properties.outputs.uamiId.value --output tsv)"
          export STORAGE_BLOB_ENDPOINT="$(az deployment group show --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name foundation --query properties.outputs.storageBlobEndpoint.value --output tsv)"

          echo "ACR_NAME=$ACR_NAME" >> $GITHUB_ENV
          echo "ACR_LOGIN_SERVER=$ACR_LOGIN_SERVER" >> $GITHUB_ENV
          echo "CONTAINER_APPS_ENV_ID=$CONTAINER_APPS_ENV_ID" >> $GITHUB_ENV
          echo "UAMI_ID=$UAMI_ID" >> $GITHUB_ENV
          echo "STORAGE_BLOB_ENDPOINT=$STORAGE_BLOB_ENDPOINT" >> $GITHUB_ENV

      - name: Layer 2 ‚Äî Build and Push Container Image
        run: |
          export IMAGE_TAG="$(echo "${{ github.sha }}" | cut -c1-7)"

          # Build and push using Azure Container Registry build (no Docker required)
          az acr build \
            --registry ${{ env.ACR_NAME }} \
            --image rossslaney-app:$IMAGE_TAG \
            --image rossslaney-app:latest \
            --file Dockerfile \
            .

          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Layer 3 ‚Äî Deploy Container App with DNS and SSL
        run: |
          export IMAGE_TAG="$(echo "${{ github.sha }}" | cut -c1-7)"
          export APP_IMAGE="${{ env.ACR_LOGIN_SERVER }}/rossslaney-app:${IMAGE_TAG}"

          # Deploy container app with DNS and SSL configuration
          az deployment group create \
            --debug \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name applications \
            --template-file infra/layers/applications.bicep \
            --parameters location=${{ env.AZURE_LOCATION }} \
            --parameters projectPrefix=${{ env.PROJECT_PREFIX }} \
            --parameters containerAppsEnvId=${{ env.CONTAINER_APPS_ENV_ID }} \
            --parameters acrLoginServer=${{ env.ACR_LOGIN_SERVER }} \
            --parameters containerImage="$APP_IMAGE" \
            --parameters domainName=${{ secrets.AZURE_DNSZONE_DOMAINNAME }} \
            --parameters uamiId=${{ env.UAMI_ID }} \
            --parameters storageBlobEndpoint=${{ env.STORAGE_BLOB_ENDPOINT }}

          # Extract Front Door profile name
          export AFD_PROFILE_NAME="$(az deployment group show --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name applications --query properties.outputs.frontDoorProfileName.value --output tsv)"
          echo "AFD_PROFILE_NAME=$AFD_PROFILE_NAME" >> $GITHUB_ENV

      - name: Layer 4 ‚Äî Trigger Front Door Domain Validation
        run: |
          echo "üîê Triggering Azure Front Door domain validation..."

          # Get the domain name without dots for custom domain names
          DOMAIN_BASE=$(echo "${{ secrets.AZURE_DNSZONE_DOMAINNAME }}" | sed 's/\./-/g')

          # Trigger validation for apex domain
          echo "Triggering validation for apex domain ($DOMAIN_BASE)..."
          az afd custom-domain update \
            --profile-name ${{ env.AFD_PROFILE_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --custom-domain-name "$DOMAIN_BASE" \
            --output none || true

          # Trigger validation for www subdomain
          echo "Triggering validation for www subdomain (www-$DOMAIN_BASE)..."
          az afd custom-domain update \
            --profile-name ${{ env.AFD_PROFILE_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --custom-domain-name "www-$DOMAIN_BASE" \
            --output none || true

          # Trigger validation for files subdomain
          echo "Triggering validation for files subdomain (files-$DOMAIN_BASE)..."
          az afd custom-domain update \
            --profile-name ${{ env.AFD_PROFILE_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --custom-domain-name "files-$DOMAIN_BASE" \
            --output none || true

          echo "‚è≥ Waiting for domain validation to complete..."
          sleep 30

          echo "üìã Domain validation status:"
          az afd custom-domain list \
            --profile-name ${{ env.AFD_PROFILE_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --query '[].{name:name,hostName:hostName,domainValidationState:domainValidationState,validationState:validationState}' \
            --output table

      - name: Deployment Summary
        run: |
          export CONTAINER_APP_FQDN="$(az deployment group show --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name applications --query properties.outputs.containerAppFqdn.value --output tsv)"
          export FRONT_DOOR_ENDPOINT="$(az deployment group show --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name applications --query properties.outputs.frontDoorEndpointHostName.value --output tsv)"
          export FILES_URL="$(az deployment group show --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name applications --query properties.outputs.filesCustomDomainUrl.value --output tsv)"

          echo "‚úÖ Deployment completed successfully!"
          echo ""
          echo "üöÄ Application URLs:"
          echo "   Primary: https://${{ secrets.AZURE_DNSZONE_DOMAINNAME }}"
          echo "   WWW (redirects to primary): https://www.${{ secrets.AZURE_DNSZONE_DOMAINNAME }}"
          echo "   Files CDN: $FILES_URL"
          echo ""
          echo "üåê Infrastructure:"
          echo "   Front Door Endpoint: $FRONT_DOOR_ENDPOINT"
          echo "   Container App FQDN: $CONTAINER_APP_FQDN"
          echo "   Storage Endpoint: ${{ env.STORAGE_BLOB_ENDPOINT }}"
          echo "   ACR: ${{ env.ACR_LOGIN_SERVER }}"
          echo "   Resource Group: ${{ env.AZURE_RESOURCE_GROUP }}"
          echo ""
          echo "üîê Security:"
          echo "   ‚úì Azure Front Door with www ‚Üí apex redirect"
          echo "   ‚úì Front Door managed SSL/TLS certificates"
          echo "   ‚úì DNS validation completed"
          echo "   ‚úì HTTPS-only access enforced"
          echo ""
          echo "üì¶ Storage:"
          echo "   ‚úì CDN-enabled storage at $FILES_URL"
          echo "   ‚úì Global edge caching and compression"
          echo "   ‚úì Custom domain with SSL"
          echo ""
          echo "üéâ Your app is now live with custom domain, SSL, www redirect, and CDN storage!"
